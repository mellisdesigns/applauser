{"version":3,"sources":["components/show-runner.js","hooks/countdown.js","components/layouts/Stage.js","App.js","serviceWorker.js","index.js"],"names":["ShowRunner","props","react_default","a","createElement","className","remainingTime","COUNTDOWN_STATUS","WAITING","RUNNING","COMPLETE","RESET","Stage","_useState","useState","_useState2","Object","slicedToArray","totalTimeValue","setTotalTimeValue","_useCountdown","time","setRemainingTime","_useState3","_useState4","countdownStatus","setCountdownStatus","timer","useRef","stopTimer","current","clearInterval","resetTimer","useEffect","console","log","concat","startTimer","setInterval","prevRemainingTime","useCountdown","value","type","placeholder","onChange","event","target","onClick","handleTimerClick","status","buttonLabel","components_show_runner","App","components_layouts_Stage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","WebFont","load","google","families","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.34f37b16.chunk.js","sourcesContent":["import React from 'react'\n\nimport './show-runner.css'\n\nconst ShowRunner = props => {\n  return (\n    <div className=\"show-runner__wrapper\">\n      <div className=\"show-runner__status-panel show-runner__status-panel--running\">\n        <div className=\"show-runner__timer show-runner__timer--running\">\n          <span className=\"show-runner__timer-text\">{props.remainingTime}</span>\n        </div>\n        <div className=\"show-runner__content\">\n          <q className=\"show-runner__motivation\">You can do it, look at the crowd, they are going wild You can do it, look at the crowd, they are going wild</q>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ShowRunner","import { useState, useEffect, useRef } from 'react'\n\nconst COUNTDOWN_STATUS = {\n  WAITING: 'WAITING',\n  RUNNING: 'RUNNING',\n  COMPLETE: 'COMPLETE',\n  RESET: 'RESET'\n}\n\nexport default function useCountdown(time) {\n  const [remainingTime, setRemainingTime] = useState()\n  const [countdownStatus, setCountdownStatus] = useState(COUNTDOWN_STATUS.WAITING)\n\n  const timer = useRef()\n  function startTimer (time) {\n    if (!timer.current) {\n      setRemainingTime(time)\n      setCountdownStatus(COUNTDOWN_STATUS.RUNNING)\n      timer.current = setInterval(() => {\n        setRemainingTime(prevRemainingTime => {\n          if (prevRemainingTime - 1 === 0) {\n            stopTimer()\n            return 0\n          }\n          return prevRemainingTime - 1\n        })\n      }, 1000)\n    }\n  }\n\n  function stopTimer () {\n    if (timer.current) {\n      clearInterval(timer.current)\n\n      setCountdownStatus(COUNTDOWN_STATUS.COMPLETE)\n    }\n  }\n\n  function resetTimer () {\n    if (timer.current) {\n      setCountdownStatus(COUNTDOWN_STATUS.RESET)\n      \n      clearInterval(timer.current)\n      timer.current = null\n\n      setRemainingTime(time)\n    }\n  }\n\n  useEffect(() => {\n    console.log(`isRunning: ${countdownStatus}, timeRemaining: ${remainingTime}`)\n\n    return () => {\n      console.log('stop timer')\n      stopTimer()\n      resetTimer()\n    }\n  }, [])\n\n  return { remainingTime, startTimer, stopTimer, resetTimer, countdownStatus }\n}","import React, { useState } from 'react'\n\nimport ShowRunner from '../show-runner'\nimport useCountdown from '../../hooks/countdown'\n\nimport './Stage.css'\n\nconst Stage = () => {\n  const [totalTimeValue, setTotalTimeValue] = useState(5)\n  const {remainingTime, startTimer, stopTimer, resetTimer, countdownStatus} = useCountdown(totalTimeValue)\n\n  function handleTimerClick (time) {\n    switch(countdownStatus) {\n      case 'RUNNING' :\n        stopTimer()\n      break\n\n      case 'COMPLETE' :\n        resetTimer()\n      break\n\n      default :\n        startTimer(time)\n      break\n    }\n  }\n\n  function handleChangeEvent (event) {\n    setTotalTimeValue(event.target.value)\n  }\n\n  function buttonLabel (status) {\n    switch (countdownStatus) {\n      case 'RUNNING' :\n        return 'Stop Speech'\n      \n      case 'COMPLETE' :\n        return 'Reset Speech'\n\n      default :\n       return 'Start Speech'\n    }\n  }\n\n  return (\n    <div className={`stage__wrapper ${(countdownStatus === 'RUNNING') ? 'stage__wrapper--running' : ''}`}>\n      <div className=\"stage__content\">\n        {countdownStatus === 'WAITING' ?\n        <form className=\"stage__form\" >\n          <input value={totalTimeValue} className=\"stage__input\" type=\"number\" placeholder=\"time in seconds\" onChange={handleChangeEvent}/>\n          <button type=\"button\" className=\"stage__button\" onClick={() => handleTimerClick(totalTimeValue)}>{buttonLabel(countdownStatus)}</button>\n        </form> :\n\n        <ShowRunner remainingTime={remainingTime} countdownStatus={countdownStatus} />\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Stage","import React from 'react'\nimport Stage from './components/layouts/Stage'\n\nimport './App.css'\n\nconst App = () => {\n  return <Stage />\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport WebFont from 'webfontloader';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nWebFont.load({\n   google: {\n    families: ['Montserrat', 'Montserrat']\n   }\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}